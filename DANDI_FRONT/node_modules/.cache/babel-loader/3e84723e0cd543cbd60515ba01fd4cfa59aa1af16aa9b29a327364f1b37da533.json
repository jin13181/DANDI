{"ast":null,"code":"var _jsxFileName = \"/Users/jung-yeonjin/Desktop/DANDI\\u1109\\u116E\\u110C\\u1165\\u11BC\\u110C\\u116E\\u11BC/DANDI_FRONT/src/client/pages/Map/MapTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Map, MapMarker } from 'react-kakao-maps-sdk';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MapTest = _ref => {\n  _s();\n  let {\n    center,\n    isPanto\n  } = _ref;\n  /*==============API데이터 호출====================*/\n  const [locations, setLoacation] = useState([]);\n  useEffect(() => {\n    const fetchLocation = async () => {\n      try {\n        const response = await axios.get(\"https://api-fvwt.onrender.com/api/location\");\n        //const response= await axios.get (\"http://localhost:8080/api/location\")\n        setLoacation(response.data);\n        //console.log(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchLocation();\n  }, []);\n\n  /*=====API데이터 호출로 가져온 데이터 location_list에 저장=====*/\n\n  const location_list = locations.map(location => ({\n    title: location.name,\n    latlng: {\n      lat: location.latitude,\n      lng: location.longitude\n    }\n  }));\n\n  /*================현재 위치 불러오기======================*/\n  const [mylocation, setMyLocation] = useState(null); // 현재 위치를 저장할 상태\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(successHandler, errorHandler); // 성공시 successHandler, 실패시 errorHandler 함수가 실행된다.\n  }, []);\n  const successHandler = response => {\n    //console.log(response); // coords: GeolocationCoordinates {latitude: 위도, longitude: 경도, …} timestamp: 1673446873903\n    const {\n      latitude,\n      longitude\n    } = response.coords;\n    setMyLocation({\n      latitude,\n      longitude\n    });\n  };\n  const errorHandler = error => {\n    console.log(error);\n  };\n\n  /*================ 고객이 클릭한 장소 위도 경도 저장======================*/\n  const [state, setState] = useState({\n    center,\n    isPanto\n  });\n\n  /*===============추가 수정 - 나의 위치 확인 버튼을 닫기 버튼으로 ==============*/\n  const [changeBtn, setChangeBtn] = useState(false);\n  function changeInfo() {\n    setState({\n      center: {\n        lat: mylocation.latitude,\n        lng: mylocation.longitude\n      },\n      isPanto: true\n    });\n    setChangeBtn(true);\n  }\n  /*================ 화면 렌더링 ======================*/\n\n  // 만약 내 위치 정보가 아직 지정 안되어 있을 경우\n  if (!mylocation) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this);\n  }\n  // 내 위치정보가 지정되어 있을 경우\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Map, {\n      center: state.center,\n      isPanto: state.isPanto,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      level: 3,\n      children: [/*#__PURE__*/_jsxDEV(MapMarker, {\n        position: {\n          lat: mylocation.latitude,\n          lng: mylocation.longitude\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), location_list.map((loc, idx) => /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: loc.latlng,\n        image: {\n          src: 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png',\n          size: {\n            width: 24,\n            height: 35\n          }\n        },\n        title: loc.title\n      }, `${loc.title}-${loc.latlng}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"locationInfo\",\n        onClick: changeInfo,\n        children: changeBtn ? \"닫기\" : \"나의 위치 확인\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n};\n_s(MapTest, \"LftQAPTIxusrhjE02V51STQc18g=\");\n_c = MapTest;\nexport default MapTest;\n\n// 참고 코드\n//https://velog.io/@wlwl99/React-Kakao-Map-SDK-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\nvar _c;\n$RefreshReg$(_c, \"MapTest\");","map":{"version":3,"names":["React","useState","useEffect","Map","MapMarker","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","MapTest","_ref","_s","center","isPanto","locations","setLoacation","fetchLocation","response","get","data","err","console","log","location_list","map","location","title","name","latlng","lat","latitude","lng","longitude","mylocation","setMyLocation","navigator","geolocation","getCurrentPosition","successHandler","errorHandler","coords","error","state","setState","changeBtn","setChangeBtn","changeInfo","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","level","position","loc","idx","image","src","size","className","onClick","_c","$RefreshReg$"],"sources":["/Users/jung-yeonjin/Desktop/DANDI수정중/DANDI_FRONT/src/client/pages/Map/MapTest.js"],"sourcesContent":["import React, { useState , useEffect } from 'react';\r\nimport { Map, MapMarker } from 'react-kakao-maps-sdk';\r\nimport axios from 'axios';\r\n\r\n\r\nconst MapTest = ({ center, isPanto }) => {\r\n\r\n    /*==============API데이터 호출====================*/\r\n    const [locations, setLoacation] =useState([]);\r\n    useEffect(() => {\r\n        const fetchLocation= async() => {\r\n            try {\r\n            const response= await axios.get (\"https://api-fvwt.onrender.com/api/location\")\r\n            //const response= await axios.get (\"http://localhost:8080/api/location\")\r\n            setLoacation(response.data);\r\n            //console.log(response.data);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n        fetchLocation();\r\n    },[]);\r\n\r\n    /*=====API데이터 호출로 가져온 데이터 location_list에 저장=====*/\r\n\r\n    const location_list = locations.map(location => ({\r\n        title: location.name,\r\n        latlng: { lat: location.latitude, lng: location.longitude }\r\n    }));\r\n\r\n\r\n\r\n    /*================현재 위치 불러오기======================*/\r\n    const [mylocation, setMyLocation] = useState(null); // 현재 위치를 저장할 상태\r\n\r\n    useEffect(() => {\r\n\t\tnavigator.geolocation.getCurrentPosition(successHandler, errorHandler); // 성공시 successHandler, 실패시 errorHandler 함수가 실행된다.\r\n\t}, []);\r\n\r\n    const successHandler = (response) => {\r\n\t\t//console.log(response); // coords: GeolocationCoordinates {latitude: 위도, longitude: 경도, …} timestamp: 1673446873903\r\n\t\tconst { latitude, longitude } = response.coords;\r\n\t\tsetMyLocation({ latitude, longitude });\r\n\t};\r\n\r\n    const errorHandler = (error) => {\r\n\t\tconsole.log(error);\r\n\t};\r\n\r\n\r\n\r\n\r\n    /*================ 고객이 클릭한 장소 위도 경도 저장======================*/\r\n    const [state, setState] = useState({\r\n        center,\r\n        isPanto,\r\n      });\r\n      \r\n\r\n    /*===============추가 수정 - 나의 위치 확인 버튼을 닫기 버튼으로 ==============*/\r\n    const [changeBtn, setChangeBtn] = useState(false);\r\n    function changeInfo(){\r\n      setState({\r\n        center: { lat: mylocation.latitude, lng: mylocation.longitude },\r\n        isPanto: true,\r\n      });\r\n      setChangeBtn(true);\r\n    }\r\n    /*================ 화면 렌더링 ======================*/\r\n\r\n    // 만약 내 위치 정보가 아직 지정 안되어 있을 경우\r\n    if (!mylocation) {\r\n        return <div>Loading...</div>;\r\n    }\r\n    // 내 위치정보가 지정되어 있을 경우\r\n\treturn (<>\r\n\t\t<Map center={state.center} isPanto={state.isPanto} style={{ width: '100%', height: '100%' }} level={3}>\r\n            <MapMarker position={{ lat: mylocation.latitude, lng: mylocation.longitude }} />\r\n\r\n\r\n\t\t\t{location_list.map((loc, idx) => (\r\n\t\t\t\t<MapMarker\r\n\t\t\t\t\tkey={`${loc.title}-${loc.latlng}`}\r\n\t\t\t\t\tposition={loc.latlng}\r\n\t\t\t\t\timage={{\r\n\t\t\t\t\t\tsrc: 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png',\r\n\t\t\t\t\t\tsize: { width: 24, height: 35 },\r\n\t\t\t\t\t}}\r\n\t\t\t\t\ttitle={loc.title}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\r\n           \r\n        \r\n          <div className='locationInfo' onClick={changeInfo}>\r\n          {changeBtn ?  \"닫기\" : \"나의 위치 확인\" }\r\n         </div>\r\n         \r\n           \r\n\t\t</Map>\r\n</>\r\n\t);\r\n};\r\n\r\nexport default MapTest;\r\n\r\n\r\n// 참고 코드\r\n//https://velog.io/@wlwl99/React-Kakao-Map-SDK-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}