{"ast":null,"code":"var _jsxFileName = \"/Users/jung-yeonjin/Desktop/DANDI\\u1109\\u116E\\u110C\\u1165\\u11BC\\u110C\\u116E\\u11BC/DANDI_FRONT/src/client/context/Authcontext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n//createContext() : 리액트 함수, 전역상태를 관리하기 위한 Context객체 생성 역할\n\nexport const AuthContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  //currentUser와 setCurrentUser라는 useState hook을 사용하여 currentUser 변수와 함수를 만든다\n  const [currentUser, setCurrentUser] = useState(JSON.parse(localStorage.getItem(\"user\") || null));\n  //localStorage에 저장된 \"user\" 항목을 가져와서 JSON.parse()메소드를 사용하여 JavaScript객체로 파싱\n  //JSON.parse() : JSON형식의 문자열을 JavaScript 객체로 변환하는 역할\n  //useState() : 리액트 컴포넌트의 상태(state)관리 위해 사용\n  //             배열을 반환하는 함수, 첫번째 원소는 state값을 나타내는 변수, 두번째 원소는 state값을 업데이트할 때 사용하는 함수\n  //             useState()함수를 호출할 때 인자로 전달하는 값은 state변수의 초기값\n  //             state값이 변경되면 컴포넌트가 재렌더링됨\n\n  //login이라는 비동기 함수를 만듦\n  const login = async (LoginId, LoginPw) => {\n    //axios 사용하여 post요청 보냄\n    const res = await axios.post(\"https://api-fvwt.onrender.com/api/auth/login\", LoginId, LoginPw);\n    setCurrentUser(res.data);\n  };\n  //logout이라는 비동기 함수\n  const logout = async e => {\n    //axios 사용하여 post요청 보냄\n    await axios.post(\"https://api-fvwt.onrender.com/api/auth/logout\");\n    setCurrentUser(null);\n    window.location.href = \"/\";\n  };\n\n  //useEffect() : 함수형 컴포넌트에서 side effect를 수행하기 위해 사용\n  //              side effect란, 컴포넌트가 렌더링 될 때 발생하지 않는 컴포넌트 외부의 변화\n  //              ex) API요청, DOM조작, 타이머 설정\n  //              컴포넌트가 렌더링 된 후에 실행되는 함수를 받음\n  //              이 함수를 통해 side effect를 수행하고, 필요한 경우 state를 업데이트\n  //              첫번째 인자로 실행할 함수를 받고, 두번째 인자로 배열을 받음\n  //              두번째 인자로 전달된 배열에는 useEffect() 함수가 의존하는 state나 props를 포함시킬 수 있음\n  //              두번째 인자로 전달된 배열이 비어있는 경우, useEffect()함수는 처음 렌더링될 때 한 번만 실행됨\n  //              컴포넌트가 렌더링될 때마다 반복적으로 실행되는 코드를 방지하고, 성능을 최적화할 수 있음\n  useEffect(() => {\n    //currentUser를 localStorage에 저장\n    localStorage.setItem(\"user\", JSON.stringify(currentUser));\n    //JSON.stringfy() : JavaScript객체를 JSON형식의 문자열로 변환하는 역할\n    //localStorage.setItem() : localStorage에 데이터 저장하는 역할 \n    //                         첫번째 인자로 저장할 데이터의 key, 두번째 인자로 저장할 데이터 값 \n    //                         (이때, 저장할 데이터는 반드시 문자열 형태여야함. JSON형태 불가능)\n  }, [currentUser]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this)\n  //AuthContext.Provider는 AuthContext의 값을 하위 컴포넌트로 전달하는 React컴포넌트\n  //AuthContextProvider 컴포넌트의 내부에서 \n  //AuthContext.Provider로 \n  //currentUser, login, logout 값을 제공하여 하위 컴포넌트에서 이를 사용할 수 있게 함\n  //\n  //즉, AuthContext.Provider를 사용하면 해당 컴포넌트의 자식 컴포넌트들에서 currentUser, login, logout 값을 useContext를 통해 손쉽게 가져와 사용할 수 있다\n  ;\n};\n\n//https://api-fvwt.onrender.com/api/auth/login\n_s(AuthContextProvider, \"CzdYsGB2DR26IjqQlfdGmC6A2TQ=\");\n_c = AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","axios","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","_ref","_s","children","currentUser","setCurrentUser","JSON","parse","localStorage","getItem","login","LoginId","LoginPw","res","post","data","logout","e","window","location","href","setItem","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jung-yeonjin/Desktop/DANDI수정중/DANDI_FRONT/src/client/context/Authcontext.js"],"sourcesContent":["import { createContext, useEffect,useState } from \"react\"\r\nimport axios from \"axios\"\r\n\r\n\r\nexport const AuthContext = createContext()\r\n//createContext() : 리액트 함수, 전역상태를 관리하기 위한 Context객체 생성 역할\r\n\r\nexport const AuthContextProvider = ({children}) => {\r\n\r\n    //currentUser와 setCurrentUser라는 useState hook을 사용하여 currentUser 변수와 함수를 만든다\r\n    const [currentUser, setCurrentUser] = useState(JSON.parse(localStorage.getItem(\"user\") || null ))\r\n    //localStorage에 저장된 \"user\" 항목을 가져와서 JSON.parse()메소드를 사용하여 JavaScript객체로 파싱\r\n    //JSON.parse() : JSON형식의 문자열을 JavaScript 객체로 변환하는 역할\r\n    //useState() : 리액트 컴포넌트의 상태(state)관리 위해 사용\r\n    //             배열을 반환하는 함수, 첫번째 원소는 state값을 나타내는 변수, 두번째 원소는 state값을 업데이트할 때 사용하는 함수\r\n    //             useState()함수를 호출할 때 인자로 전달하는 값은 state변수의 초기값\r\n    //             state값이 변경되면 컴포넌트가 재렌더링됨\r\n\r\n    //login이라는 비동기 함수를 만듦\r\n    const login = async(LoginId,LoginPw) => {\r\n        //axios 사용하여 post요청 보냄\r\n        const res = await axios.post(\"https://api-fvwt.onrender.com/api/auth/login\", LoginId,LoginPw);\r\n        setCurrentUser(res.data);\r\n    }\r\n    //logout이라는 비동기 함수\r\n    const logout = async(e)=>{\r\n        //axios 사용하여 post요청 보냄\r\n        await axios.post(\"https://api-fvwt.onrender.com/api/auth/logout\");\r\n        setCurrentUser(null);\r\n        window.location.href=\"/\";\r\n    };\r\n\r\n\r\n    //useEffect() : 함수형 컴포넌트에서 side effect를 수행하기 위해 사용\r\n    //              side effect란, 컴포넌트가 렌더링 될 때 발생하지 않는 컴포넌트 외부의 변화\r\n    //              ex) API요청, DOM조작, 타이머 설정\r\n    //              컴포넌트가 렌더링 된 후에 실행되는 함수를 받음\r\n    //              이 함수를 통해 side effect를 수행하고, 필요한 경우 state를 업데이트\r\n    //              첫번째 인자로 실행할 함수를 받고, 두번째 인자로 배열을 받음\r\n    //              두번째 인자로 전달된 배열에는 useEffect() 함수가 의존하는 state나 props를 포함시킬 수 있음\r\n    //              두번째 인자로 전달된 배열이 비어있는 경우, useEffect()함수는 처음 렌더링될 때 한 번만 실행됨\r\n    //              컴포넌트가 렌더링될 때마다 반복적으로 실행되는 코드를 방지하고, 성능을 최적화할 수 있음\r\n    useEffect(()=> {\r\n        //currentUser를 localStorage에 저장\r\n        localStorage.setItem(\"user\", JSON.stringify(currentUser));\r\n        //JSON.stringfy() : JavaScript객체를 JSON형식의 문자열로 변환하는 역할\r\n        //localStorage.setItem() : localStorage에 데이터 저장하는 역할 \r\n        //                         첫번째 인자로 저장할 데이터의 key, 두번째 인자로 저장할 데이터 값 \r\n        //                         (이때, 저장할 데이터는 반드시 문자열 형태여야함. JSON형태 불가능)\r\n    },[currentUser]);\r\n\r\n    return(\r\n        <AuthContext.Provider value={{currentUser,login,logout}}> \r\n            {children}\r\n        </AuthContext.Provider>\r\n        //AuthContext.Provider는 AuthContext의 값을 하위 컴포넌트로 전달하는 React컴포넌트\r\n        //AuthContextProvider 컴포넌트의 내부에서 \r\n        //AuthContext.Provider로 \r\n        //currentUser, login, logout 값을 제공하여 하위 컴포넌트에서 이를 사용할 수 있게 함\r\n        //\r\n        //즉, AuthContext.Provider를 사용하면 해당 컴포넌트의 자식 컴포넌트들에서 currentUser, login, logout 값을 useContext를 통해 손쉽게 가져와 사용할 수 있다\r\n    )   \r\n}\r\n\r\n//https://api-fvwt.onrender.com/api/auth/login\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAACC,QAAQ,QAAQ,OAAO;AACzD,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGzB,OAAO,MAAMC,WAAW,gBAAGN,aAAa,EAAE;AAC1C;;AAEA,OAAO,MAAMO,mBAAmB,GAAGC,IAAA,IAAgB;EAAAC,EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC,GAAAF,IAAA;EAE1C;EACA,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAACW,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAE,CAAC;EACjG;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMC,KAAK,GAAG,MAAAA,CAAMC,OAAO,EAACC,OAAO,KAAK;IACpC;IACA,MAAMC,GAAG,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,8CAA8C,EAAEH,OAAO,EAACC,OAAO,CAAC;IAC7FP,cAAc,CAACQ,GAAG,CAACE,IAAI,CAAC;EAC5B,CAAC;EACD;EACA,MAAMC,MAAM,GAAG,MAAMC,CAAC,IAAG;IACrB;IACA,MAAMrB,KAAK,CAACkB,IAAI,CAAC,+CAA+C,CAAC;IACjET,cAAc,CAAC,IAAI,CAAC;IACpBa,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,GAAG;EAC5B,CAAC;;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA1B,SAAS,CAAC,MAAK;IACX;IACAc,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACgB,SAAS,CAAClB,WAAW,CAAC,CAAC;IACzD;IACA;IACA;IACA;EACJ,CAAC,EAAC,CAACA,WAAW,CAAC,CAAC;EAEhB,oBACIN,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAACpB,WAAW;MAACM,KAAK;MAACM;IAAM,CAAE;IAAAb,QAAA,EACnDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;EAEb;EACA;EACA;EACA;EACA;EACA;EAAA;AAER,CAAC;;AAED;AAAA1B,EAAA,CAzDaF,mBAAmB;AAAA6B,EAAA,GAAnB7B,mBAAmB;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}